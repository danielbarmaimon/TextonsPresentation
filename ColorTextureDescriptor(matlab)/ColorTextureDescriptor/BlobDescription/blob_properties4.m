% Blob_properties4
% Given an image and a threshold it finds the shape attributes of the image's blobs.
%
% INPUT:
%   - im: image
%   - th: threshold threshold in the blob detection. This is the minimum filter response level to consider the detection.
%     It should be a real number in [0.1 ... 0.05] if the image has low contrast
%     If the constrast of the image is hight it should be 0.15 or less.
% 
% OUPUT: 
% - dades: blob structure with 6 components.
%       o) position
%       o) semi-major_axis of the ellipse
%       o) semi-menor_axis of the ellipse
%       o) angle of the orientation [in radians]
%       o) maximums: matrix containing +1's if there is a center of a positive blob or -1 if it's a center of a negative blob
%       o) valfilt: matrix conttaining the maximum magnitude response of the filter in each position
%
% EXAMPLE: [dades]=blob_properties4(image, 0.03)

function dades=blob_properties4(im,th);

    % Takes the data filters from the file generated by filter_sym_log_generation function.
    load dades_filtres.mat; % d_filtres;

    sx=d_filtres(1,:);
    sy=d_filtres(2,:);
    or=d_filtres(3,:);

    % Image normalization, to be invariant to intensity changes
    im=double(im);
    im=im./max(im(:));

    % Calculation of the maximums = Blobs' centers and blobs' scales 
    % c is a N*N vector where there are marked the blobs' centers: +1 for the
    % positive blobs and -1 for de negative blobs

    [c,ix,valfilt]=maxima_calculation14_OP(im,th);   
    
    if (max(abs(c)) == 0) % there is no blob detected
        dades=struct('pos_m',[],'e_g',[],'e_p',[],'angle',[],'maxim',[],'valfilt',[]); 
    else
        % Calculation of the second moment matrix for each image pixel and
        % for each scale. There is a 0 value where there isn't any maximum.
       [mu11,mu12,mu22]=sec_mom_matrix(size(im),sx,sy,or,2,im);            
    
     % Selection of the WSMM components for the corrresponding scale
       [mu11s,mu12s,mu22s]=blobs_param(ix,mu11,mu12,mu22);

     % compute eigenValues and eigenvectors of WSMM.
       [vec1,vec2,val1,val2]=eigenvectors2(mu11s,mu12s,mu22s);

     % Position and index of the maximums: on the whole image
       pos=find(c~=0);         %  centers' localization. Index on the image matrix
       ixp=ix(pos);

     % computing shape attributes 

       ar_g=sqrt(1./(val2(pos)+eps));   % add eps to avoid a 0 division
       ar_p=sqrt(1./(val1(pos)+eps));

       aspect=ar_g./ar_p; 				% aspect ratio, independent of the scale
       eix_p=sx(ixp)';    				% we fix semi_menor axis like the filter scale
       eix_g=aspect.*eix_p;             % semi_major axis can be deduced from the aspect ratio and the semi_menor axis
       angle=atan(vec2(pos,1)./(vec2(pos,2)+eps));	% angle of the blobs [in radians]
    
       area=eix_g.*eix_p; 				% area ~ product of the axis
    
       dades=struct('pos_m',pos,'e_g',eix_g,'e_p',eix_p,'angle',angle,'maxim',c,'valfilt',valfilt); 
   end

    