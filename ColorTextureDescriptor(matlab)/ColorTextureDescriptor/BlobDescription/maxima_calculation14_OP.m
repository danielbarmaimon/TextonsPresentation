%  Maxima_calculation14_OP
%  Calculates the maximums localitzation of the blobs. 
%
% INPUT:
%   - im: image
%   - th: threshold threshold in the blob detection. This is the minimum filter response level to consider the detection.
%     It should be a real number in [0.1 ... 0.05] if the image has low contrast
%     If the constrast of the image is hight it should be 0.15 or less.
% 
% OUTPUT:
%   - con: list of the detected blobs centers. [1: positive blobs. -1 negative blobs]
%   - ixd: list of the filter index where the blob was detected.
%   - valfilt: matrix containing the maximum magnitude of response of
%       the filter in each position
%           
% EXAMPLE: [con, ixd, valfilt]=maxima_calculation14_OP(image, 0.03)


function [con,ixd,valfilt]=maxima_calculation14_OP(im,th);

    % Take the data filters from the file generated by filter_sym_log_generation function.
    load filter_sym_log.mat;    % tf_filt, r x c x 11 size, where [r,c] is image size
    load struct_sym_syn.mat;    % se_syn;
    load dades_filtres.mat;     % d_filtres;
    
    nf=size(d_filtres,2);   % number of filters
    np=numel(im);           % number of image points
    rr=size(im,1);          % number of image rows
    cc=size(im,2);          % number of image columns

    tfim=fft2(im);               
    
    % Aplies all the filters to the image. For each filter takes the image
    % points where the filter response is maximum

    ii=1;
    while (ii <= nf)
        % Aplies Laplacian filter
            prod=tfim.*tf_filt(:,:,ii);           
            imf=real(fftshift(ifft2(prod)));              
            clear prod                             
            imfilt(:,:,ii)=imf;                    % filtered image
            
       % Selection of the maximums. It calculates separately the positive maximums from the negative maximums
            % NEGATIVE MAXIMUMS
            rmb=double(imregionalmax(-imf));    %  calculates the maximums of the filtered image
            rmb=rmb.*((-imf)>th);               % it only considers the points wich have a greater magnitude than the threshold
            xb(:,ii)=reshape((-imf).*rmb.*(sum(rmb(:))~=np),np,1);
            clear rmb                                               
            % POSITIVE MAXIMUMS
            rmn=double(imregionalmax(imf));
            rmn=rmn.*((imf)>th);
            xn(:,ii)=reshape(imf.*rmn.*(sum(rmn(:))~=np),np,1);     
            clear rmn                                                                     
            ii=ii+1;    
   end
   
   x=[xb xn];
   
   clear xb xn                        
   [m in]=(max(x,[],2));      % It gets the maximum of the maximum response of all filters. It saves the magnitude and the filter which found the blob. 
   clear x                             
   
   % Prepare output parameters
    con=zeros(np,1);
    ixd=zeros(np,1);
    valfilt=zeros(rr,cc);
    
    % Check if there is any blob detected
   if (max(m) ~= 0)            % There is some blob detected.   
       
       % Put 0 value where we have an index=1 and there is no blob in this position
   
      in(m==0)=0;  % if there is no blob detected, index must be 0.
    
       % Prepare to filter the blobs which are overlapped 
       in2=reshape(in,rr,cc);
       m2=reshape(m,rr,cc);
       
       clear in
         
        % Remove the blobs' centers which are detected at the border of the
        % image. They are wrong.
       in2(1,:)=0;
       in2(rr,:)=0;
       in2(:,1)=0;
       in2(:,cc)=0;    
       
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
       % WRONG MAXIMUMS ELIMINATION          %%%%%%%
       % Given nearby blobs (white and black), so that the center of a blobs is included in the neighboring area
       % it filtres one of the blobs, which has a lower response of the filter.
       % Blob reconstruction is needed.
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
   
       ii=1;
       while (ii<=nf)      
               % for each scale, reconstructs the blobs and save them
            ji=imdilate(se_syn(:,:,ii),strel('disk',2,8));                  % increase a little the blob size to filter the outline blobs
            imdil(:,:,ii)=double(imdilate((m2).*(in2==ii|in2==ii+nf),ji));  % white maximums and black maximums of this dilated indexes
            ii=ii+1;
       end
     
       Mmax=max(imdil,[],3);     % absolute blobs maximums
       clear imdil             
        
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       % Get again the blob centers which are lost in the last filtering
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
           % blobs centers which are absolute maximums
       ix=in2.*(Mmax==m2);
           % Givent this centers, reconstructs their blobs
       bloB2=zeros(rr,cc);
       ii=1;
       while (ii<=nf)      
           ji=imdilate(se_syn(:,:,ii),strel('disk',2,8));       % increase a little the blob size to filter the outline blobs
           imdilb2=double(imdilate((ix==ii|ix==ii+nf),ji)); 
           bloB2=bloB2 | imdilb2;                               %  image with the reconstructed blobs (black and white) in all the scales
           ii=ii+1;
       end
       clear imdilb2
    
        % blobs centers that are outside of the blobs with maximum response that maybe must be added.
        
       ix2=in2.*(~bloB2);
       
        % With that blobs, do again the process. the centers that are included in a neighboring area of the blob with a greater 
        %filter response must be eliminated.
        
       ii=1;
       while (ii<=nf)      
            ji=imdilate(se_syn(:,:,ii),strel('disk',2,8));                     % increase a little the blob size to filter the outline blobs
            imdilb3(:,:,ii)=double(imdilate((m2).*(ix2==ii|ix2==ii+nf),ji));    % reconstructed blobs in the ii scale
            ii=ii+1;
       end
     
       Mmax=max(imdilb3,[],3);     % absolute maxims
       clear imdilb3             
    
           % blobs centers that are absolute maxims     
       ix3=ix2.*(Mmax==m2);
       
           % Take all the good center blobs
       ixx=(ix | ix3).*in2; 
       
    
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       %  module to avoid having adjacent maximums with the same value
       % If there are two adjacent blobs, it removes one of them
       % (it doesn't consider the filter response)
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    
       
       if size(find(ixx>0),1) >0
           
         etis=bwlabel(ixx>0);
         etis=reshape(etis,np,1);
         posm=find(etis>0);             % All the position that there is a label --> where there is a maximum
         posm=[etis(posm) posm];        % save the labels value and their positions
         posms=sortrows(posm);          % Sort by label and position
         ndx=ones(size(posms,1),1);     % To save where starts each label
         ndx(1)=1;
         ndx(2:end)=diff(posms(:,1));   % Where ndx is 1, is a blob top
         pos_v=posms(ndx==1,2);         % These are the maximums that must be saved. (inside the maximums list that we have)
         
         ixx=reshape(ixx,np,1);
         ixd(pos_v)=ixx(pos_v);
       
         ixx=ixd;
       
        % Mark with 1 the postive blobs' centers . With -1, the negative blobs' centers
         con(ixx>0 & ixx <= nf)=1;
         con(ixx>nf)=-1;
           % For each center, save the filter where the response is maximum
         ixd=ixx;
         ixd(ixx>nf)=ixx(ixx>nf)-nf;
      
       end
      
         % Save the filter magnitude response at the blobs centers
       ixdM=reshape(ixd,rr,cc);
       ii=1;
       while (ii <=rr)
           jj=1;
           while(jj<=cc)
              if ( ixdM(ii,jj) >0 )
                 valfilt(ii,jj)=abs(imfilt(ii,jj,ixdM(ii,jj)));    
              end
              jj=jj+1;
           end
           ii=ii+1;
       end
       
       
   end
    